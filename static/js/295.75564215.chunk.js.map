{"version":3,"sources":["../node_modules/prismjs/components/prism-peoplecode.js"],"names":["Prism","languages","peoplecode","RegExp","source","join","pattern","greedy","lookbehind","alias","inside","pcode"],"mappings":"iIAAAA,MAAMC,UAAUC,WAAa,CAC3B,QAAWC,OAAO,CAClB,mBAAmBC,OACnB,cAAcA,OACd,4DAA4DA,OAC5D,mBAAmBA,QAAQC,KAAK,MAChC,OAAU,CACRC,QAAS,kDACTC,QAAQ,GAEV,SAAY,OACZ,sBAAuB,CACrBD,QAAS,2CACTE,YAAY,EACZC,MAAO,YAET,aAAc,CACZH,QAAS,iIACTE,YAAY,EACZE,OAAQ,CACN,YAAe,MAGnB,QAAW,gYACX,mBAAoB,CAClBJ,QAAS,sBACTG,MAAO,YAET,SAAY,sBACZ,QAAW,sBACX,OAAU,oBACV,SAAY,8BACZ,YAAe,eAEjBT,MAAMC,UAAUU,MAAQX,MAAMC,UAAUC","file":"static/js/295.75564215.chunk.js","sourcesContent":["Prism.languages.peoplecode = {\n  'comment': RegExp([// C-style multiline comments\n  /\\/\\*[\\s\\S]*?\\*\\//.source, // REM comments\n  /\\bREM[^;]*;/.source, // Nested <* *> comments\n  /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source, // /+ +/ comments\n  /\\/\\+[\\s\\S]*?\\+\\//.source].join(\"|\")),\n  'string': {\n    pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n    greedy: true\n  },\n  'variable': /%\\w+/,\n  'function-definition': {\n    pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n    lookbehind: true,\n    alias: 'function'\n  },\n  'class-name': {\n    pattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n    lookbehind: true,\n    inside: {\n      'punctuation': /:/\n    }\n  },\n  'keyword': /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|implements|import|instance|if|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n  'operator-keyword': {\n    pattern: /\\b(?:and|not|or)\\b/i,\n    alias: 'operator'\n  },\n  'function': /[_a-z]\\w*(?=\\s*\\()/i,\n  'boolean': /\\b(?:false|true)\\b/i,\n  'number': /\\b\\d+(?:\\.\\d+)?\\b/,\n  'operator': /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n  'punctuation': /[:.;,()[\\]]/\n};\nPrism.languages.pcode = Prism.languages.peoplecode;"],"sourceRoot":""}