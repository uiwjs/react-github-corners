{"version":3,"sources":["../node_modules/prismjs/components/prism-scheme.js"],"names":["Prism","languages","scheme","pattern","greedy","alias","lookbehind"],"mappings":"iIAAAA,MAAMC,UAAUC,OAAS,CACvB,QAAW,MACX,OAAU,CACRC,QAAS,oBACTC,QAAQ,GAEV,OAAU,CACRD,QAAS,cACTC,QAAQ,GAEV,UAAa,CACXD,QAAS,uCACTC,QAAQ,EACRC,MAAO,UAET,mBAAoB,CACpB,CACEF,QAAS,yBACTG,YAAY,GACX,CACDH,QAAS,yBACTG,YAAY,IAEd,QAAW,CACTH,QAAS,gPACTG,YAAY,GAEd,QAAW,CACTH,QAAS,4NACTG,YAAY,GAEd,OAAU,CAgBRH,QAAS,uVACTG,YAAY,GAEd,QAAW,CACTH,QAAS,8BACTG,YAAY,GAEd,SAAY,CACVH,QAAS,0CACTG,YAAY,GAEd,SAAY,CACVH,QAAS,4BACTG,YAAY,GAEd,YAAe","file":"static/js/363.9fdbbe14.chunk.js","sourcesContent":["Prism.languages.scheme = {\n  'comment': /;.*/,\n  'string': {\n    pattern: /\"(?:[^\"\\\\]|\\\\.)*\"/,\n    greedy: true\n  },\n  'symbol': {\n    pattern: /'[^()#'\\s]+/,\n    greedy: true\n  },\n  'character': {\n    pattern: /#\\\\(?:[ux][a-fA-F\\d]+|[-a-zA-Z]+|\\S)/,\n    greedy: true,\n    alias: 'string'\n  },\n  'lambda-parameter': [// https://www.cs.cmu.edu/Groups/AI/html/r4rs/r4rs_6.html#SEC30\n  {\n    pattern: /(\\(lambda\\s+)[^()'\\s]+/,\n    lookbehind: true\n  }, {\n    pattern: /(\\(lambda\\s+\\()[^()']+/,\n    lookbehind: true\n  }],\n  'keyword': {\n    pattern: /(\\()(?:define(?:-library|-macro|-syntax|-values)?|defmacro|(?:case-)?lambda|let(?:(?:\\*|rec)?(?:-values)?|-syntax|rec-syntax)|else|if|cond|begin|delay(?:-force)?|parameterize|guard|set!|(?:quasi-)?quote|syntax-(?:case|rules))(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'builtin': {\n    pattern: /(\\()(?:(?:cons|car|cdr|list|call-with-current-continuation|call\\/cc|append|abs|apply|eval)\\b|null\\?|pair\\?|boolean\\?|eof-object\\?|char\\?|procedure\\?|number\\?|port\\?|string\\?|vector\\?|symbol\\?|bytevector\\?)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'number': {\n    // This pattern (apart from the lookarounds) works like this:\n    //\n    // Decimal numbers\n    // <dec real>       := \\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+\n    // <dec complex>    := <dec real>(?:[+-]<dec real>i)?|<dec real>i\n    // <dec prefix>     := (?:#d(?:#[ei])?|#[ei](?:#d)?)?\n    // <dec number>     := <dec prefix>[+-]?<complex>\n    //\n    // Binary, octal, and hexadecimal numbers\n    // <b.o.x. real>    := [\\da-fA-F]+(?:\\/[\\da-fA-F]+)?\n    // <b.o.x. complex> := <b.o.x. real>(?:[+-]<b.o.x. real>i)?|<b.o.x. real>i\n    // <b.o.x. prefix>  := #[box](?:#[ei])?|#[ei](?:#[box])?\n    // <b.o.x. number>  := <b.o.x. prefix>[+-]?<b.o.x. complex>\n    //\n    // <number>         := <dec number>|<b.o.x. number>\n    pattern: /(^|[\\s()])(?:(?:#d(?:#[ei])?|#[ei](?:#d)?)?[+-]?(?:(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)(?:[+-](?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)?|(?:\\d*\\.?\\d+(?:[eE][+-]?\\d+)?|\\d+\\/\\d+)i)|(?:#[box](?:#[ei])?|#[ei](?:#[box])?)[+-]?(?:[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?(?:[+-][\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i)?|[\\da-fA-F]+(?:\\/[\\da-fA-F]+)?i))(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'boolean': {\n    pattern: /(^|[\\s()])#[ft](?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'operator': {\n    pattern: /(\\()(?:[-+*%\\/]|[<>]=?|=>?)(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'function': {\n    pattern: /(\\()[^()'\\s]+(?=[()\\s]|$)/,\n    lookbehind: true\n  },\n  'punctuation': /[()']/\n};"],"sourceRoot":""}