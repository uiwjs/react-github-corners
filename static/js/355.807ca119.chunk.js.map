{"version":3,"sources":["../node_modules/prismjs/components/prism-rust.js"],"names":["Prism","multilineComment","source","i","replace","languages","rust","pattern","RegExp","lookbehind","greedy","alias","inside","rest"],"mappings":"kIAAA,SAAWA,GAGT,IAFA,IAAIC,EAAmB,8CAA8CC,OAE5DC,EAAI,EAAGA,EAAI,EAAGA,IAErBF,EAAmBA,EAAiBG,QAAQ,WAAW,WACrD,OAAOH,KAIXA,EAAmBA,EAAiBG,QAAQ,WAAW,WACrD,MAAO,UAAUF,UAEnBF,EAAMK,UAAUC,KAAO,CACrB,QAAW,CAAC,CACVC,QAASC,OAAO,YAAYN,OAASD,GACrCQ,YAAY,EACZC,QAAQ,GACP,CACDH,QAAS,mBACTE,YAAY,EACZC,QAAQ,IAEV,OAAU,CACRH,QAAS,wDACTG,QAAQ,GAEV,KAAQ,CACNH,QAAS,wEACTG,QAAQ,EACRC,MAAO,UAET,UAAa,CACXJ,QAAS,8CACTG,QAAQ,EACRC,MAAO,YACPC,OAAQ,CACN,OAAU,OAKd,iBAAkB,CAChBL,QAAS,2DACTE,YAAY,EACZC,QAAQ,EACRE,OAAQ,CACN,sBAAuB,CACrBL,QAAS,UACTI,MAAO,eAETE,KAAM,OAIV,sBAAuB,CACrBN,QAAS,OACTI,MAAO,UAET,qBAAsB,CACpBJ,QAAS,iBACTE,YAAY,EACZE,MAAO,eAET,SAAY,QACZ,sBAAuB,CACrBJ,QAAS,eACTE,YAAY,EACZE,MAAO,YAET,kBAAmB,CACjBJ,QAAS,kCACTE,YAAY,EACZE,MAAO,cAET,qBAAsB,CAAC,CACrBJ,QAAS,qCACTE,YAAY,EACZE,MAAO,aACN,CACDJ,QAAS,wFACTE,YAAY,EACZE,MAAO,YACPC,OAAQ,CACN,YAAe,QAGnB,QAAW,CACX,8RAEA,gEAIA,SAAY,kCACZ,MAAS,CACPL,QAAS,OACTI,MAAO,YAET,SAAY,sBACZ,aAAc,eACd,UAAa,CACXJ,QAAS,6DACTK,OAAQ,CACN,YAAe,OAInB,OAAU,yKACV,QAAW,qBACX,YAAe,mCACf,SAAY,uDAEdZ,EAAMK,UAAUC,KAAK,kBAAkBM,OAAOC,KAAOb,EAAMK,UAAUC,KACrEN,EAAMK,UAAUC,KAAgB,UAAEM,OAAe,OAAIZ,EAAMK,UAAUC,KAAa,OAlHpF,CAmHGN","file":"static/js/355.807ca119.chunk.js","sourcesContent":["(function (Prism) {\n  var multilineComment = /\\/\\*(?:[^*/]|\\*(?!\\/)|\\/(?!\\*)|<self>)*\\*\\//.source;\n\n  for (var i = 0; i < 2; i++) {\n    // support 4 levels of nested comments\n    multilineComment = multilineComment.replace(/<self>/g, function () {\n      return multilineComment;\n    });\n  }\n\n  multilineComment = multilineComment.replace(/<self>/g, function () {\n    return /[^\\s\\S]/.source;\n  });\n  Prism.languages.rust = {\n    'comment': [{\n      pattern: RegExp(/(^|[^\\\\])/.source + multilineComment),\n      lookbehind: true,\n      greedy: true\n    }, {\n      pattern: /(^|[^\\\\:])\\/\\/.*/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'string': {\n      pattern: /b?\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"|b?r(#*)\"(?:[^\"]|\"(?!\\1))*\"\\1/,\n      greedy: true\n    },\n    'char': {\n      pattern: /b?'(?:\\\\(?:x[0-7][\\da-fA-F]|u{(?:[\\da-fA-F]_*){1,6}|.)|[^\\\\\\r\\n\\t'])'/,\n      greedy: true,\n      alias: 'string'\n    },\n    'attribute': {\n      pattern: /#!?\\[(?:[^\\[\\]\"]|\"(?:\\\\[\\s\\S]|[^\\\\\"])*\")*\\]/,\n      greedy: true,\n      alias: 'attr-name',\n      inside: {\n        'string': null // see below\n\n      }\n    },\n    // Closure params should not be confused with bitwise OR |\n    'closure-params': {\n      pattern: /([=(,:]\\s*|\\bmove\\s*)\\|[^|]*\\||\\|[^|]*\\|(?=\\s*(?:\\{|->))/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        'closure-punctuation': {\n          pattern: /^\\||\\|$/,\n          alias: 'punctuation'\n        },\n        rest: null // see below\n\n      }\n    },\n    'lifetime-annotation': {\n      pattern: /'\\w+/,\n      alias: 'symbol'\n    },\n    'fragment-specifier': {\n      pattern: /(\\$\\w+:)[a-z]+/,\n      lookbehind: true,\n      alias: 'punctuation'\n    },\n    'variable': /\\$\\w+/,\n    'function-definition': {\n      pattern: /(\\bfn\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'type-definition': {\n      pattern: /(\\b(?:enum|struct|union)\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'class-name'\n    },\n    'module-declaration': [{\n      pattern: /(\\b(?:crate|mod)\\s+)[a-z][a-z_\\d]*/,\n      lookbehind: true,\n      alias: 'namespace'\n    }, {\n      pattern: /(\\b(?:crate|self|super)\\s*)::\\s*[a-z][a-z_\\d]*\\b(?:\\s*::(?:\\s*[a-z][a-z_\\d]*\\s*::)*)?/,\n      lookbehind: true,\n      alias: 'namespace',\n      inside: {\n        'punctuation': /::/\n      }\n    }],\n    'keyword': [// https://github.com/rust-lang/reference/blob/master/src/keywords.md\n    /\\b(?:abstract|as|async|await|become|box|break|const|continue|crate|do|dyn|else|enum|extern|final|fn|for|if|impl|in|let|loop|macro|match|mod|move|mut|override|priv|pub|ref|return|self|Self|static|struct|super|trait|try|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, // primitives and str\n    // https://doc.rust-lang.org/stable/rust-by-example/primitives.html\n    /\\b(?:[ui](?:8|16|32|64|128|size)|f(?:32|64)|bool|char|str)\\b/],\n    // functions can technically start with an upper-case letter, but this will introduce a lot of false positives\n    // and Rust's naming conventions recommend snake_case anyway.\n    // https://doc.rust-lang.org/1.0.0/style/style/naming/README.html\n    'function': /\\b[a-z_]\\w*(?=\\s*(?:::\\s*<|\\())/,\n    'macro': {\n      pattern: /\\w+!/,\n      alias: 'property'\n    },\n    'constant': /\\b[A-Z_][A-Z_\\d]+\\b/,\n    'class-name': /\\b[A-Z]\\w*\\b/,\n    'namespace': {\n      pattern: /(?:\\b[a-z][a-z_\\d]*\\s*::\\s*)*\\b[a-z][a-z_\\d]*\\s*::(?!\\s*<)/,\n      inside: {\n        'punctuation': /::/\n      }\n    },\n    // Hex, oct, bin, dec numbers with visual separators and type suffix\n    'number': /\\b(?:0x[\\dA-Fa-f](?:_?[\\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(?:\\d(?:_?\\d)*)?\\.?\\d(?:_?\\d)*(?:[Ee][+-]?\\d+)?)(?:_?(?:[iu](?:8|16|32|64|size)?|f32|f64))?\\b/,\n    'boolean': /\\b(?:false|true)\\b/,\n    'punctuation': /->|\\.\\.=|\\.{1,3}|::|[{}[\\];(),:]/,\n    'operator': /[-+*\\/%!^]=?|=[=>]?|&[&=]?|\\|[|=]?|<<?=?|>>?=?|[@?]/\n  };\n  Prism.languages.rust['closure-params'].inside.rest = Prism.languages.rust;\n  Prism.languages.rust['attribute'].inside['string'] = Prism.languages.rust['string'];\n})(Prism);"],"sourceRoot":""}