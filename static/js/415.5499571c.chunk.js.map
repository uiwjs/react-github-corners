{"version":3,"sources":["../node_modules/prismjs/components/prism-typescript.js"],"names":["Prism","languages","typescript","extend","pattern","lookbehind","greedy","inside","typeInside","insertBefore","alias","ts"],"mappings":"kIAAA,SAAWA,GACTA,EAAMC,UAAUC,WAAaF,EAAMC,UAAUE,OAAO,aAAc,CAChE,aAAc,CACZC,QAAS,+JACTC,YAAY,EACZC,QAAQ,EACRC,OAAQ,MAIV,QAAW,6ZACX,QAAW,iGAGNP,EAAMC,UAAUC,WAAsB,UAE7C,IAAIM,EAAaR,EAAMC,UAAUE,OAAO,aAAc,WAC/CK,EAAW,cAClBR,EAAMC,UAAUC,WAAW,cAAcK,OAASC,EAClDR,EAAMC,UAAUQ,aAAa,aAAc,WAAY,CACrD,mBAAoB,CAElBL,QAAS,yFACTE,QAAQ,EACRC,OAAQ,CACN,SAAY,4CACZ,QAAW,CACTH,QAAS,WAETM,MAAO,aACPH,OAAQC,OAKhBR,EAAMC,UAAUU,GAAKX,EAAMC,UAAUC,WAnCvC,CAoCGF","file":"static/js/415.5499571c.chunk.js","sourcesContent":["(function (Prism) {\n  Prism.languages.typescript = Prism.languages.extend('javascript', {\n    'class-name': {\n      pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n      lookbehind: true,\n      greedy: true,\n      inside: null // see below\n\n    },\n    // From JavaScript Prism keyword list and TypeScript language spec: https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#221-reserved-words\n    'keyword': /\\b(?:abstract|as|asserts|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|undefined|var|void|while|with|yield)\\b/,\n    'builtin': /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n  }); // doesn't work with TS because TS is too complex\n\n  delete Prism.languages.typescript['parameter']; // a version of typescript specifically for highlighting types\n\n  var typeInside = Prism.languages.extend('typescript', {});\n  delete typeInside['class-name'];\n  Prism.languages.typescript['class-name'].inside = typeInside;\n  Prism.languages.insertBefore('typescript', 'function', {\n    'generic-function': {\n      // e.g. foo<T extends \"bar\" | \"baz\">( ...\n      pattern: /#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n      greedy: true,\n      inside: {\n        'function': /^#?[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*/,\n        'generic': {\n          pattern: /<[\\s\\S]+/,\n          // everything after the first <\n          alias: 'class-name',\n          inside: typeInside\n        }\n      }\n    }\n  });\n  Prism.languages.ts = Prism.languages.typescript;\n})(Prism);"],"sourceRoot":""}